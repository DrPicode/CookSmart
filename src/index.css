@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --safe-area-inset-top: env(safe-area-inset-top, 0px);
    --safe-area-inset-right: env(safe-area-inset-right, 0px);
    --safe-area-inset-bottom: env(safe-area-inset-bottom, 0px);
    --safe-area-inset-left: env(safe-area-inset-left, 0px);
  }

  body {
    overscroll-behavior: none;
  }

/* Global theme colors handled via utility classes on <body> injected by React root (see App/index.css). */
/* Dark mode surface overrides for existing Tailwind utility classes so the UI visibly changes
   without refactoring every component. These override only neutral surfaces / grays. */
.dark {
  color-scheme: dark;
}
.dark .bg-white { background-color: #111827 !important; }
.dark .bg-gray-50 { background-color: #1f2937 !important; }
.dark .bg-gray-100 { background-color: #1f2937 !important; }
.dark .bg-gray-200 { background-color: #374151 !important; }
/* Text adjustments */
  .dark .text-gray-700 { color: #e5e7eb !important; }
  .dark .text-gray-600 { color: #d1d5db !important; }
  .dark .text-gray-500 { color: #9ca3af !important; }
  /* Utility to keep a muted gray color in both light and dark modes (use where you want the same gray) */
  .muted-gray { color: #4b5563; }
  .dark .muted-gray { color: #4b5563 !important; }
/* Border tweaks */
.dark .border-gray-200 { border-color: #374151 !important; }
.dark .border-gray-300 { border-color: #4b5563 !important; }
/* Semantic helpers */
@layer utilities {
  /* Ensure this utility is emitted after Tailwind utilities so it can override dark-mode mappings */
  .muted-gray { color: #4b5563 !important; }
  .dark .muted-gray { color: #4b5563 !important; }
  .text-surface { color: #1f2937; }
  .dark .text-surface { color: #f3f4f6; }
  .bg-surface { background-color: #ffffff; }
  .dark .bg-surface { background-color: #111827; }
  .heading-surface { color: #1f2937; font-weight:600; }
  .dark .heading-surface { color: #f3f4f6; }
}
  * {
    -webkit-tap-highlight-color: transparent;
  }
}

@layer utilities {
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }

  @keyframes slideInFromRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  @keyframes slideInFromBottom {
    from {
      transform: translateY(20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes slideInFromTop {
    from {
      transform: translateY(-20px);
      opacity: 0;
    }
    to {
      transform: translateY(0);
      opacity: 1;
    }
  }

  @keyframes scaleIn {
    from {
      transform: scale(0.95);
      opacity: 0;
    }
    to {
      transform: scale(1);
      opacity: 1;
    }
  }

  @keyframes toastIn {
    from {
      transform: translateX(100%) scale(0.9);
      opacity: 0;
    }
    to {
      transform: translateX(0) scale(1);
      opacity: 1;
    }
  }

  @keyframes pulse-soft {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: 0.7;
    }
  }

  .animate-fade-in {
    animation: fadeIn 0.3s ease-out;
  }

  .animate-slide-in-right {
    animation: slideInFromRight 0.4s cubic-bezier(0.16, 1, 0.3, 1);
  }

  .animate-slide-in-bottom {
    animation: slideInFromBottom 0.4s cubic-bezier(0.16, 1, 0.3, 1);
  }

  .animate-slide-in-top {
    animation: slideInFromTop 0.3s cubic-bezier(0.16, 1, 0.3, 1);
  }

  .animate-scale-in {
    animation: scaleIn 0.2s cubic-bezier(0.16, 1, 0.3, 1);
  }

  .animate-toast-in {
    animation: toastIn 0.3s cubic-bezier(0.16, 1, 0.3, 1);
  }

  .animate-pulse-soft {
    animation: pulse-soft 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }

  .transition-smooth {
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
  }

  .transition-bounce {
    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  }
}